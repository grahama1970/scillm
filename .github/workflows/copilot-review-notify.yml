name: Copilot Review Notify

on:
  pull_request_review:
    types: [submitted]
  workflow_dispatch:
    inputs:
      pr:
        description: PR number
        required: true
      sha:
        description: Head SHA
        required: true
      state:
        description: review state (approved/commented/changes_requested)
        required: true
      reviewer:
        description: reviewer login
        required: true

permissions:
  pull-requests: write
  issues: write
  statuses: write

concurrency:
  group: copilot-review-${{ github.event.pull_request.number || inputs.pr || github.sha }}
  cancel-in-progress: false

jobs:
  notify:
    runs-on: ubuntu-latest
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      ARANGO_URL: ${{ secrets.ARANGO_URL }}
      ARANGO_DB: ${{ secrets.ARANGO_DB }}
      ARANGO_USER: ${{ secrets.ARANGO_USER }}
      ARANGO_PASS: ${{ secrets.ARANGO_PASS }}
      TAILSCALE_AUTHKEY: ${{ secrets.TAILSCALE_AUTHKEY }}
    steps:
      - name: Resolve inputs
        id: ctx
        uses: actions/github-script@v7
        with:
          script: |
            const isPR = !!context.payload.pull_request;
            const pr = isPR ? context.payload.pull_request.number : Number(core.getInput('pr'));
            const sha = isPR ? context.payload.pull_request.head.sha : core.getInput('sha');
            const reviewer = isPR ? context.payload.review.user.login : core.getInput('reviewer');
            const state = isPR ? context.payload.review.state : core.getInput('state');
            core.setOutput('pr', pr.toString());
            core.setOutput('sha', sha);
            core.setOutput('reviewer', reviewer);
            core.setOutput('state', state);
      - name: Guard â€” Copilot approved only
        if: |
          (github.event_name == 'pull_request_review' && github.event.review.user.login == 'github-copilot[bot]' && github.event.review.state == 'approved') ||
          (github.event_name == 'workflow_dispatch' && steps.ctx.outputs.reviewer == 'github-copilot[bot]' && steps.ctx.outputs.state == 'approved')
        run: echo "Copilot approved â€” continuing"

      - name: Set status copilot/review=success
        if: |
          (github.event_name == 'pull_request_review' && github.event.review.user.login == 'github-copilot[bot]' && github.event.review.state == 'approved') ||
          (github.event_name == 'workflow_dispatch' && steps.ctx.outputs.reviewer == 'github-copilot[bot]' && steps.ctx.outputs.state == 'approved')
        run: |
          PR_SHA="${{ steps.ctx.outputs.sha }}"
          curl -s -X POST \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/statuses/${PR_SHA} \
            -d '{"state":"success","context":"copilot/review","description":"Copilot approved this PR"}'

      - name: Remove copilot-review label
        if: |
          (github.event_name == 'pull_request_review' && github.event.review.user.login == 'github-copilot[bot]' && github.event.review.state == 'approved') ||
          (github.event_name == 'workflow_dispatch' && steps.ctx.outputs.reviewer == 'github-copilot[bot]' && steps.ctx.outputs.state == 'approved')
        uses: actions/github-script@v7
        with:
          script: |
            const pr = Number(core.getInput('pr')) || Number('${{ steps.ctx.outputs.pr }}');
            try {
              await github.rest.issues.removeLabel({ owner: context.repo.owner, repo: context.repo.repo, issue_number: pr, name: 'copilot-review' });
            } catch (e) {
              core.info('label not present or already removed');
            }

      - name: Comment acknowledgement
        if: |
          (github.event_name == 'pull_request_review' && github.event.review.user.login == 'github-copilot[bot]' && github.event.review.state == 'approved') ||
          (github.event_name == 'workflow_dispatch' && steps.ctx.outputs.reviewer == 'github-copilot[bot]' && steps.ctx.outputs.state == 'approved')
        uses: actions/github-script@v7
        with:
          script: |
            const pr = Number(core.getInput('pr')) || Number('${{ steps.ctx.outputs.pr }}');
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr,
              body: `âœ… Copilot review processed for PR #${pr}. Status set to \`copilot/review\` = success.`
            })

      - name: Start Tailscale (optional)
        if: env.TAILSCALE_AUTHKEY != ''
        uses: tailscale/github-action@v2
        with:
            authkey: ${{ env.TAILSCALE_AUTHKEY }}

      - name: Write memory episode to Arango (optional)
        if: env.ARANGO_URL != '' && env.ARANGO_DB != '' && env.ARANGO_USER != '' && env.ARANGO_PASS != ''
        run: |
          TS=$(date +%s)
          DATA=$(jq -n --arg pr "${{ steps.ctx.outputs.pr }}" --arg sha "${{ steps.ctx.outputs.sha }}" --arg reviewer "${{ steps.ctx.outputs.reviewer }}" --arg ts "$TS" '{summary:"Copilot review processed", pr:$pr, sha:$sha, reviewer:$reviewer, ts:($ts|tonumber)}')
          curl -s -u "$ARANGO_USER:$ARANGO_PASS" -H 'Content-Type: application/json' \
            "$ARANGO_URL/_db/$ARANGO_DB/_api/document/devops_episodes" -d "$DATA" || true

      - name: Slack notify (optional)
        if: env.SLACK_WEBHOOK_URL != ''
        run: |
          pr=${{ steps.ctx.outputs.pr }}
          sha=${{ steps.ctx.outputs.sha }}
          reviewer=${{ steps.ctx.outputs.reviewer }}
          payload=$(jq -n --arg text "ðŸ§  Copilot approved PR #$pr in $GITHUB_REPOSITORY (sha: ${sha:0:7}) by $reviewer" '{text:$text}')
          curl -s -X POST -H 'Content-Type: application/json' -d "$payload" "$SLACK_WEBHOOK_URL" || true
