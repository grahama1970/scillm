<?xml version="1.0" encoding="UTF-8"?>
<!-- Balanced Geometric variant (prefers Poppins). Text-based; see Makefile logo-export to outline. -->
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 460 110" role="img" aria-labelledby="title desc" text-rendering="geometricPrecision">
  <title id="title">SciLLM Logo — Balanced</title>
  <desc id="desc">Balanced, geometric wordmark with orbital mark. Prefers Poppins.</desc>
  <defs>
    <style>
      .brand-dark { fill: #0A2343; }
      .brand-blue { fill: #0D4EA3; }
      .brand-teal { fill: #5FD3D3; }
      .stroke-blue { stroke: #0D4EA3; }
      .stroke-teal { stroke: #5FD3D3; }
      .text {
        font-family: Poppins, "Nunito Sans", Segoe UI, Roboto, Helvetica Neue, Arial, sans-serif;
        font-weight: 500;
      }
    </style>
    <!-- Directional shading for spark/overlays -->
    <!-- Spark visual for i-dot -->
    <radialGradient id="sparkGrad" cx="50%" cy="50%" r="50%">
      <stop offset="0%" stop-color="#FFFFFF" stop-opacity="0.9"/>
      <stop offset="55%" stop-color="#5FD3D3" stop-opacity="0.6"/>
      <stop offset="100%" stop-color="#5FD3D3" stop-opacity="0"/>
    </radialGradient>
    <filter id="sparkGlow" x="-50%" y="-50%" width="200%" height="200%" color-interpolation-filters="sRGB">
      <feGaussianBlur in="SourceGraphic" stdDeviation="0">
        <animate attributeName="stdDeviation" values="0;0.56;0" dur="0.18s"
                 begin="meetClock.begin; meetClock.repeatEvent" fill="remove"/>
      </feGaussianBlur>
    </filter>
    <!-- Subtle shimmer sweep for wordmark -->
    <linearGradient id="shimmerGrad" x1="0%" y1="0%" x2="100%" y2="0%">
      <stop offset="0%" stop-color="#FFFFFF" stop-opacity="0"/>
      <stop offset="45%" stop-color="#FFFFFF" stop-opacity="0.12"/>
      <stop offset="50%" stop-color="#FFFFFF" stop-opacity="0.17"/>
      <stop offset="55%" stop-color="#FFFFFF" stop-opacity="0.12"/>
      <stop offset="100%" stop-color="#FFFFFF" stop-opacity="0"/>
    </linearGradient>
    <!-- Nucleus volumetric body (light center → dark rim) -->
    <radialGradient id="nucleusBody" cx="36%" cy="28%" r="86%">
      <stop offset="0%"   stop-color="#13213A" stop-opacity="0.95"/>
      <stop offset="62%"  stop-color="#0A1730" stop-opacity="0.98"/>
      <stop offset="100%" stop-color="#030C1A" stop-opacity="1"/>
    </radialGradient>
    <!-- Nucleus depth helpers: inner shadow + narrow rotating specular band -->
    <filter id="nucleusInner" x="-50%" y="-50%" width="200%" height="200%" color-interpolation-filters="sRGB">
      <feGaussianBlur in="SourceAlpha" stdDeviation="0.6" result="blur"/>
      <feComposite in="blur" in2="SourceAlpha" operator="out" result="inner"/>
      <feColorMatrix in="inner" type="matrix"
        values="0 0 0 0 0
                0 0 0 0 0
                0 0 0 0 0
                0 0 0 0.9 0" result="innerA"/>
      <feBlend in="SourceGraphic" in2="innerA" mode="multiply"/>
    </filter>
    <!-- Nucleus rotating highlight (very subtle) -->
    <linearGradient id="nucleusSweepGrad" x1="0%" y1="0%" x2="100%" y2="0%">
      <stop offset="0%"   stop-color="#FFFFFF" stop-opacity="0"/>
      <stop offset="49%"  stop-color="#FFFFFF" stop-opacity="0"/>
      <stop offset="50%"  stop-color="#FFFFFF" stop-opacity="0.18"/>
      <stop offset="51%"  stop-color="#FFFFFF" stop-opacity="0"/>
      <stop offset="100%" stop-color="#FFFFFF" stop-opacity="0"/>
    </linearGradient>
    <!-- Clip for nucleus overlay so the rotating sweep stays inside the circle -->
    <clipPath id="clipNucleus">
      <circle cx="22" cy="32" r="3.8"/>
    </clipPath>
    <!-- Nucleus uses solid fill matching i-dot (#030C1A). Change fill on #nucleus to adjust. -->
    <!-- Clock that ticks each approx meet. For opposite directions with 2.4s + 2.6s: T = (D1*D2)/(D1+D2) ≈ 1.248s -->
    <rect id="meetClockRect" width="0" height="0" opacity="0">
      <animate id="meetClock" attributeName="x" values="0;0" dur="1.248s"
               begin="motBlue.begin; motBlue.repeatEvent" repeatCount="indefinite"/>
    </rect>
    <!-- Mask to the wordmark text so the sweep only affects letters -->
    <mask id="maskWordmark" maskUnits="userSpaceOnUse" maskContentUnits="userSpaceOnUse">
      <rect width="100%" height="100%" fill="#000"/>
      <use xlink:href="#wordmarkGroup" href="#wordmarkGroup" fill="#fff"/>
    </mask>
  </defs>
  <!-- Orbit scaled ≈8% around its own center (22,32) to keep position true -->
  <!-- Animation root: edit core knobs here (durations, wobble, paths). -->
  <g id="animRoot" transform="translate(24,21) translate(22 32) scale(0.92) translate(-22 -32)">
    <!-- subtle nucleus behind orbits -->
    <!-- Nucleus: volumetric fill; pulses gently on meets; inner shadow adds edge rolloff -->
    <circle id="nucleus" cx="22" cy="32" r="3.6" fill="url(#nucleusBody)" filter="url(#nucleusInner)">
      <animate attributeName="r" values="3.6;3.66;3.6" dur="0.14s" calcMode="spline"
               keyTimes="0;0.5;1" keySplines=".42 0 .58 1; .42 0 .58 1"
               begin="meetClock.begin+0.02s; meetClock.repeatEvent+0.02s" fill="remove"/>
    </circle>
    <!-- Rotating specular band (very subtle), with a brief meet pop; scales with breath for cohesion -->
    <g clip-path="url(#clipNucleus)" opacity="0.16" style="pointer-events:none">
      <g transform="translate(22 32)">
        <!-- breath scale (matches nucleus pulse) -->
        <animateTransform attributeName="transform" type="scale" additive="sum"
                          values="1;1.017;1" dur="0.14s"
                          begin="meetClock.begin+0.02s; meetClock.repeatEvent+0.02s"
                          calcMode="spline" keySplines=".42 0 .58 1"/>
        <rect x="-4" y="-4" width="8" height="8" fill="url(#nucleusSweepGrad)">
          <!-- constant slow rotation -->
          <animateTransform attributeName="transform" type="rotate" from="0" to="360" dur="40s" repeatCount="indefinite"/>
          <!-- tiny meet nudge: 0 -> +12deg -> 0 -->
          <animateTransform attributeName="transform" type="rotate" additive="sum"
                            values="0;12;0" dur="0.18s"
                            begin="meetClock.begin+0.02s; meetClock.repeatEvent+0.02s"
                            calcMode="spline" keySplines=".42 0 .58 1"/>
        </rect>
      </g>
      <!-- meet-gated brightness lift on the highlight only -->
      <animate attributeName="opacity" values="0.16;0.24;0.16" dur="0.14s"
               begin="meetClock.begin+0.02s; meetClock.repeatEvent+0.02s"
               calcMode="spline" keySplines=".42 0 .58 1"/>
    </g>
    <!-- Orbits as grouped frames so motion paths and rings share the same transforms -->
    <g id="orbit-teal-group">
      <ellipse id="orbit-teal-ring" cx="22" cy="32" rx="24" ry="13" fill="none" class="stroke-teal" stroke-width="2.0"
               stroke-linecap="round" stroke-linejoin="round" vector-effect="non-scaling-stroke"/>
      <!-- teal motion path in group-local coords -->
      <path id="orbit-teal-path" d="M 46 32 A 24 13 0 1 1 -2 32 A 24 13 0 1 1 46 32" fill="none" opacity="0"/>
      <!-- Blue electron rides teal ring (opposite direction) -->
      <circle r="3.4" class="brand-blue">
        <animateMotion id="motBlue" dur="2.6s" begin="0s" repeatCount="indefinite" calcMode="linear" rotate="auto">
          <mpath xlink:href="#orbit-teal-path" href="#orbit-teal-path"/>
        </animateMotion>
        <!-- visual slingshot cue via gentle scale at top/bottom; does not affect path speed -->
        <animateTransform attributeName="transform" type="scale" additive="sum"
                          values="1 1; 1.06 1.06; 1 1; 1.06 1.06; 1 1"
                          keyTimes="0;0.24;0.28;0.74;0.78;1" dur="2.6s" repeatCount="indefinite"
                          calcMode="spline" keySplines=".42 0 .58 1; .42 0 .58 1; .42 0 .58 1; .42 0 .58 1"/>
      </circle>
      <!-- wobble the whole teal frame -->
      <animateTransform attributeName="transform" type="rotate" additive="sum"
                        values="-1 22 32; 1 22 32; -1 22 32" keyTimes="0;0.5;1"
                        begin="0s" dur="2.5s" repeatCount="indefinite" calcMode="spline"
                        keySplines=".42 0 .58 1; .42 0 .58 1"/>
    </g>

    <g id="orbit-blue-group" transform="rotate(35 22 32)">
      <ellipse id="orbit-blue-ring" cx="22" cy="32" rx="24" ry="13" fill="none" class="stroke-blue" stroke-width="2.0"
               stroke-linecap="round" stroke-linejoin="round" vector-effect="non-scaling-stroke"/>
      <!-- blue motion path in group-local coords -->
      <path id="orbit-blue-path" d="M 46 32 A 24 13 0 1 0 -2 32 A 24 13 0 1 0 46 32" fill="none" opacity="0"/>
      <!-- Teal electron rides blue ring -->
      <circle r="3.4" class="brand-teal">
        <animateMotion id="motTeal" dur="2.4s" begin="0s" repeatCount="indefinite" calcMode="linear" rotate="auto">
          <mpath xlink:href="#orbit-blue-path" href="#orbit-blue-path"/>
        </animateMotion>
        <!-- visual slingshot cue via gentle scale at top/bottom; does not affect path speed -->
        <animateTransform attributeName="transform" type="scale" additive="sum"
                          values="1 1; 1.06 1.06; 1 1; 1.06 1.06; 1 1"
                          keyTimes="0;0.24;0.28;0.74;0.78;1" dur="2.4s" repeatCount="indefinite"
                          calcMode="spline" keySplines=".42 0 .58 1; .42 0 .58 1; .42 0 .58 1; .42 0 .58 1"/>
      </circle>
      <!-- wobble the whole blue frame (adds to base 35° tilt) -->
      <animateTransform attributeName="transform" type="rotate" additive="sum"
                        values="-0.8 22 32; 0.8 22 32; -0.8 22 32" keyTimes="0;0.5;1"
                        begin="0.2s" dur="2.5s" repeatCount="indefinite" calcMode="spline"
                        keySplines=".42 0 .58 1; .42 0 .58 1"/>
    </g>

    <!-- reduced-motion rules consolidated at bottom -->
  </g>
  <g id="wordmarkGroup" class="text" font-size="47">
    <!-- Preserve natural kerning by keeping 'Sc' together; small tracking for openness -->
    <text x="92" y="66" class="brand-dark" letter-spacing="0.02em">Sc</text>
    <!-- Geometric i placed after 'Sc' with an even optical gap (moved right) -->
    <g transform="translate(156,66)">
      <!-- match stem to Poppins 500 verticals -->
      <rect x="-1.6" y="-27" width="3.2" height="27" rx="1.2" class="brand-dark"/>
      <!-- i-dot core (dark blue-black) -->
      <g id="idot">
        <circle id="idot-core" cx="0" cy="-33.5" r="2.8" class="brand-dark" fill="#030C1A"/>
      </g>
    </g>
    <text x="162" y="66" class="brand-blue" letter-spacing="0.03em">LLM</text>
  </g>
  <!-- i-dot spark overlay (animation isolated for reduced-motion gating) -->
  <g class="animRoot" transform="translate(156,66)" filter="url(#sparkGlow)">
    <!-- Pulse the existing base dot to avoid double-ink -->
    <animate xlink:href="#idot-core" attributeName="r" values="2.8;3.02;2.8" dur="0.14s" calcMode="spline"
             keyTimes="0;0.5;1" keySplines=".42 0 .58 1; .42 0 .58 1"
             begin="meetClock.begin+0.02s; meetClock.repeatEvent+0.02s" fill="remove"/>
    <circle cx="0" cy="-33.5" r="3.2" fill="url(#sparkGrad)" opacity="0">
      <animate attributeName="opacity" values="0;0.34;0" dur="0.14s"
               begin="meetClock.begin+0.02s; meetClock.repeatEvent+0.02s" fill="remove"/>
      <animate attributeName="r" values="3.2;3.65;3.2" dur="0.14s"
               begin="meetClock.begin+0.02s; meetClock.repeatEvent+0.02s" fill="remove"/>
    </circle>
  </g>
  <!-- Shimmer overlay, masked to wordmark; sweeps left→right at each meetClock tick -->
  <g id="wordmarkShimmer" mask="url(#maskWordmark)" style="pointer-events:none" aria-hidden="true">
    <g>
      <rect x="0" y="0" width="460" height="110" fill="url(#shimmerGrad)" shape-rendering="geometricPrecision">
        <animateTransform attributeName="transform" type="translate" dur="0.45s" values="-230 0; 460 0" keyTimes="0;1"
                          begin="meetClock.begin; meetClock.repeatEvent" fill="remove" calcMode="linear"/>
      </rect>
    </g>
  </g>
  <style>
    @media (prefers-reduced-motion: reduce) {
      #animRoot, .animRoot, #wordmarkShimmer { display: none; }
    }
  </style>
</svg>
